import { JsonPrimitive } from '@salesforce/ts-types';
export type AggregateFunction = keyof typeof aggregateMap;
export type SortDirection = keyof typeof sortMap;

export const aggregateMap = {
  collect: (value: string) => value,
  distinct: (value: string) => `COUNT_DISTINCT(${value})`,
  empty: (value: string) => `COUNT_NONEMPTY(${value})`,
  nonempty: (value: string) => `COUNT_EMPTY(${value})`,
  min: (value: string) => `MIN(${value})`,
  max: (value: string) => `MAX(${value})`,
  sum: (value: string) => `SUM(${value})`,
  avg: (value: string) => `AVG(${value})`,
};

export const sortMap = {
  asc: 'ASC',
  desc: 'DESC',
};

/**
 * Describes a property used in an Arango query.
 */
export type AqProperty = {
  /**
   * The document variable this property belongs to. Only necessary when constructing
   * complex, multi-collection queries.
   *
   * @defaultValue `item`
   */
  document?: string;

  /**
   * The dot-notation path of a given JSON document property; individual
   * entries in arrays can be referenced using array notation.
   *
   * @example A simple property reference
   * `{ property: 'title' }`
   *
   * @example A nested property with custom label
   * `{ property: 'metadata.headline', label: 'headline' }`
   *
   * @example An item from a nested array, and a custom label
   * `{ property: 'children[0].name', label: 'firstborn' }`
   */
  property: string;

  /**
   * A label to be used when returning or displaying the property. If no label is supplied,
   * one will be generated by sanitizing the property name itelf.
   *
   * If label is `false`, sorts and filter that use the property will be applied, but the
   * property itself won't be included in the results.
   */
  label?: string | false;

  /**
   * The data type of the property in question. Generally, this is only necessary
   * when generating aggregate queries that use numeric functions like SUM or AVG
   * on string properties.
   */
  type?: 'string' | 'number' | 'boolean' | 'object' | 'array';
};

export type AqAggregate = AqProperty & {
  /**
   * An aggregation function to apply to the property. Supported values:
   *
   * - collect:  Distinct values of this property will be collected to group
   *             other properties' aggregate values. If any aggregate properties
   *             exist in a query, vanilla properties are treated as 'collect'
   *             aggregates.
   * - empty:    The number of empty (null or zero-length array) values
   * - nonempty: The number of non-empty (non-null or 1+ length array) values
   * - unique:   The number of unique values
   * - min:      The smallest numeric value present in the property
   * - max:      The largest numeric value present in the property
   * - sum:      The sum of all numeric values in the property
   * - avg:      The average of all numeric values in the property
   *
   * If numeric functions (min, max, sum, avg) are used on string or array
   * properties, the function is applied to the length of the property.
   */
  aggregate: AggregateFunction;
};

export type AqSort = AqProperty & {
  /**
   * Sort the final results by this property, in the direction specified.
   */
  direction: SortDirection;
};

export type AqFilter = AqProperty & {
  /**
   * If true, the filter will be applied after any collect or aggregation functions.
   *
   * @defaultValue `false`
   */
  collected?: boolean;

  /**
   * Filters the query result to documents where the property is **equal to** the specified value.
   */
  eq?: JsonPrimitive;

  /**
   * Filters the query result to documents where the property is **less than** to the specified value.
   */
  lt?: string | number;

  /**
   * Filters the query result to documents where the property is **greater than** to the specified value.
   */
  gt?: string | number;

  /**
   * Filters the query result to documents where the property is **one of the specified values**.
   */
  in?: JsonPrimitive[];

  /**
   * Filters the query result to documents where the property is an array that **contains the specified value**.
   */
  contains?: JsonPrimitive;

  /**
   * Negates the effect of any filter conditions; for example, an `eq` condition
   * becomes `!=` rather than `==` in the final AQL query.
   */
  negate?: true;
};
